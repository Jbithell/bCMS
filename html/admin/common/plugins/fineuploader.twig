{# TO GET THIS TO WORK YOU NEED TO MAKE SURE THE FOLLOWING IS ALLOWED IN THE CORS CONFIG ON S3

ORIGIN = https://*.imun.co.uk
Allowed Methods = PUT & POST
ALlowed Headers = (ideally you want x-amz-meta-* but DigitalOcean don't allow that in the way aws does)
Authorization
ETAG
authorization
content-type
origin
x-amz-acl
x-amz-content-sha256
x-amz-date
x-amz-meta-qqfilename
x-amz-meta-typeid
x-amz-meta-subtype
x-amz-meta-size
#}
{% if CONFIG.AWS.UPLOAD %}
<script>
    function getExtension(fileName) {
        var re = /(?:\.([^.]+))?$/;
        return re.exec(fileName)[1];
    }

</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/file-uploader/5.16.2/s3.jquery.fine-uploader/s3.jquery.fine-uploader.min.js" integrity="sha256-5L8IbsXI50sMNQVBSaJy/y/iBO6SwfrZyWRRKP4a1SI=" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/file-uploader/5.16.2/s3.jquery.fine-uploader/fine-uploader-gallery.min.css" integrity="sha256-kpkbsX+nDRw9KkbbvG1cZj4uw67QM8y5pVNNk3uTRXo=" crossorigin="anonymous" />
<script type="text/template" id="qq-template">
    <div class="qq-uploader-selector qq-uploader qq-gallery" qq-drop-area-text="Drop files here">
        <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
        </div>
        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
            <span class="qq-upload-drop-area-text-selector"></span>
        </div>
        <div class="qq-upload-button-selector qq-upload-button">
            <div><i class="fa fa-cloud-upload"></i> Upload</div>
        </div>
        <span class="qq-drop-processing-selector qq-drop-processing">
                <span>Processing dropped files...</span>
                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
            </span>
        <ul class="qq-upload-list-selector qq-upload-list" role="region" aria-live="polite" aria-relevant="additions removals">
            <li>
                <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
                <div class="qq-progress-bar-container-selector qq-progress-bar-container">
                    <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                </div>
                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                <div class="qq-thumbnail-wrapper">
                    <img class="qq-thumbnail-selector" qq-max-size="120" qq-server-scale>
                </div>
                <button type="button" class="qq-upload-cancel-selector qq-upload-cancel">X</button>
                <button type="button" class="qq-upload-retry-selector qq-upload-retry">
                    <span class="qq-btn qq-retry-icon" aria-label="Retry"></span>
                    Retry
                </button>

                <div class="qq-file-info">
                    <div class="qq-file-name">
                        <span class="qq-upload-file-selector qq-upload-file"></span>
                        <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                    </div>
                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                    <span class="qq-upload-size-selector qq-upload-size"></span>
                    <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">
                        <span class="qq-btn qq-delete-icon" aria-label="Delete"></span>
                    </button>
                    <button type="button" class="qq-btn qq-upload-pause-selector qq-upload-pause">
                        <span class="qq-btn qq-pause-icon" aria-label="Pause"></span>
                    </button>
                    <button type="button" class="qq-btn qq-upload-continue-selector qq-upload-continue">
                        <span class="qq-btn qq-continue-icon" aria-label="Continue"></span>
                    </button>
                </div>
            </li>
        </ul>

        <dialog class="qq-alert-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">Close</button>
            </div>
        </dialog>

        <dialog class="qq-confirm-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">No</button>
                <button type="button" class="qq-ok-button-selector">Yes</button>
            </div>
        </dialog>

        <dialog class="qq-prompt-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <input type="text">
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">Cancel</button>
                <button type="button" class="qq-ok-button-selector">Ok</button>
            </div>
        </dialog>
    </div>
</script>

<script>
    {% set thisElementID = ('fineUploader' ~ random()) %}{# Allows multiple instances on a page#}
    $( document ).ready(function() {
        $('#{{ thisElementID }}').fineUploaderS3({
            request: {
                endpoint: "https://{{ CONFIG.AWS.DEFAULTUPLOADS.BUCKET }}.{{ CONFIG.AWS.DEFAULTUPLOADS.ENDPOINT }}",
                accessKey: "{{ CONFIG.AWS.FINEUPLOADER.KEY }}"
            },
            signature: {
                endpoint: "{{ CONFIG.ROOTURL }}/api/s3files/generateSignature.php"
            },
            uploadSuccess: {
                endpoint: "{{ CONFIG.ROOTURL }}/api/s3files/uploadSuccess.php",

            },
            callbacks: {
                onComplete: function(id, name, responseJson, xhr) {
                    if (responseJson.resize != true) {
                        {% block success %}
                        {% endblock %}
                    } else {
                        console.log("Resize successfully uploaded");
                    }
                    {#
                        responseJson.id is the uplaoded file id
                    #}
                }
            },
            objectProperties: {
                bucket: "{{ CONFIG.AWS.DEFAULTUPLOADS.BUCKET }}",
                {% if publicBool %}
                acl: "public-read",
                {% endif %}
                key: function (fileId) {
                    var filename = $("#{{ thisElementID }}").fineUploader("getName", fileId);

                    //While we are here - set the size etc. of the file so it will be handled correctly in the php
                    $("#{{ thisElementID }}").fineUploader("setParams", {"size": $("#{{ thisElementID }}").fineUploader("getSize", fileId),"typeid": "{{ typeId }}","subtype": "{{ subTypeId }}","public": "{{ publicBool }}"});

                    {% if publicBool %}
                    return "db/webUploads/public" + "/" + "{{ type }}" +"/" + "{{ 15|randomString }} " + filename;
                    {% else %}
                    return "db/webUploads/private" + "/" + "{{ type }}" +"/" + Date.now() + "-" + fileId + "-" + (Math.floor(Math.random() * (99999999999999999999 - 9999999999 + 1)) + 9999999999) + "." + getExtension(filename);
                    {% endif %}
                }
            },
            validation: {
                {% if imagesOnly is defined and imagesOnly %}
                allowedExtensions: ["gif", "jpeg", "jpg", "png"],
                acceptFiles: "image/gif, image/jpeg, image/png",
                 {% endif %}
                sizeLimit: 500000000, //500mb
                itemLimit: {{ fileLimit is defined ? fileLimit*5 : 1000 }} //Have to multiply by 5 because of the scaled images
            },
            retry: {
                enableAuto: true
            },
            chunking: {
                enabled: false //Did a lot of work on this - but it didn't work out
            },
            resume: {
                enabled: false
            },
            deleteFile: {
                enabled: false
            },
            scaling: {
                sendOriginal: true, //Send the original file as well
                hideScaled: true, //Don't show all the extra ones we generate
                sizes: [
                    {name: "tiny", maxSize: 100},
                    {name: "small", maxSize: 400},
                    {name: "medium", maxSize: 8000},
                    {name: "large", maxSize: 1500}
                ]
            },
            {% if paste %}
            {# Only one fineuploader on the page can be setup to allow files to be pasted - so set this carefully #}
            paste: {
                targetElement: $("#{{ thisElementID }}"),
                promptForName: false
            }
            {% endif %}
        });
    });
</script>
<div id="{{ thisElementID }}"></div>
{% endif %}